// Program.java
package lesson_3;

public class Program {
    public static void main(String[] args) {
        MyArrayStack<Character> stack = new MyArrayStack<>();
        stack.push('a');
        stack.push('b');
        stack.push('c');
        stack.push('d');
        stack.push('e');
        stack.push('f');
        stack.push('g');
        stack.push('h');
        stack.push('i');
        stack.push('j');
        stack.push('k');
        stack.push('l');
        stack.push('m');
        stack.push('n');
        System.out.println(stack.size());
        System.out.println(stack.isEmpty());
        System.out.println(stack.peek());
        System.out.println(stack.pop());
        System.out.println(stack.peek());
        System.out.println(stack);
        stack.push('o');
        System.out.println(stack);
    }
}

// MyArrayStack.java

package lesson_2;

import java.util.NoSuchElementException;

public class MyArrayStack<Item> {
    private Object[] stack = new Object[1];
    private int size = 0;

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    private void resize(int capacity) {
        Object[] tmp = new Object[capacity];
        for (int i = 0; i < size; i++) {
            tmp[i] = stack[i];
        }
        stack = tmp;
    }

    public void push(Item item) {
        if (size == stack.length) {
            resize(stack.length * 2);
        }

        stack[size++] = item;
    }

    public Item pop() {
        if (isEmpty()) {
            throw new NoSuchElementException("Stack is empty");
        }
        Item item = (Item) stack[size - 1];
        stack[size - 1] = null;
        size--;
        if (size == stack.length / 4 && size > 0) {
            resize(stack.length / 2);
        }
        return item;
    }

    public Item peek() {
        if (isEmpty()) {
            throw new NoSuchElementException("Stack is empty");
        }
        return (Item) stack[size - 1];
    }

    public String toString() {
        StringBuilder s = new StringBuilder();
        for (int i = size - 1; i >= 0; i--) {
            s.append(stack[i] + ", ");


        }
        return s.toString();


    }
}

// Проверка Deckue 

public class DequeCheck {
    public static void main(String[] args) {
        Deque deque = new Deque(0); // здесь не могу связать, как я сказал раньше
    Deque d = new Deque(10);
    d.insertLeft(5);
    d.insertRight(100);
    d.removeLeft();
    d.removeRight();
        System.out.println(d); // я думаю, дожно быть так, но точно не знаю, старался дописать

    }
}

// Deque.java

public class Deque {
        public static void main(String[] args) {
    }
    int size;
    int left;
    int right;
    int[] data;

    Deque(int size)
    {
        data = new int[this.size = size];
    }
    int insertRight(int value)
    {
        if (++right == size)
            right = 0;
        data[right] = value;
        return data[right];
    }

    int removeRight()
    {
        int ret = data[right];
        if (--right < 0)
            right = size - 1;
        return ret;
    }

    void insertLeft(int value)
    {
        data[left] = value;
        if (--left < 0)
            left = size - 1;
    }

    int removeLeft()
    {
        if (++left == size)
            left = 0;
        return data[left];
    }


}


